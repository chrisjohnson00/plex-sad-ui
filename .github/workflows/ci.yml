name: 'CI'

on:
  push:
    branches:
      - '**'
    tags:
      - '**'

concurrency:
  group: '${{ github.workflow }}-${{ github.ref }}'
  cancel-in-progress: true

jobs:
  lint:
    name: 'Lint'
    runs-on: 'ubuntu-latest'
    steps:
      - uses: 'actions/checkout@v4'
      - uses: 'actions/setup-python@v5'
        with:
          python-version: '3.11'
      - name: 'Install dependencies'
        run: |
          echo "Installing CI requirements"
          pip install --upgrade --user pip flake8
          echo "Installing project requirements"
          pip install -r requirements.txt
      - name: 'Flake8 :allthethings:'
        run: 'python -m flake8 --max-line-length 120'
  #  test:
  #    name: 'Test'
  #    runs-on: 'ubuntu-latest'
  #    steps:
  #      - uses: 'actions/checkout@v4'
  #      - uses: 'actions/setup-python@v5'
  #        with:
  #          python-version: '3.11'
  #      - name: 'Install dependencies'
  #        run: |
  #          echo "Installing CI requirements"
  #          pip install --upgrade --user pip pytest coverage pyfakefs
  #          echo "Installing project requirements"
  #          pip install -r requirements.txt
  #      - name: 'Run tests'
  #        run: 'python -m coverage run --branch -m pytest'
  #      - name: 'Display coverage report'
  #        run: |
  #          python -m coverage report --fail-under=80 \
  #          --omit="*/.local/*","*/tests/test_*" -m
  container_build:
    name: 'Build and Push Docker Container'
    runs-on: 'ubuntu-latest'
    #    needs: ['lint', 'test']
    needs:
      - 'lint'
    steps:
      - uses: 'actions/checkout@v4'
      - name: 'Get calculated next version based on commit history'
        id: 'calculated-next-version'
        uses: 'mathieudutour/github-tag-action@v6.1'
        with:
          github_token: '${{ secrets.GITHUB_TOKEN }}'
          release_branches: 'main'
          default_bump: 'patch'
          dry_run: 'true'
          append_to_pre_release_tag: 'rc-${{ github.run_id }}'
          pre_release_branches: '^((main(?!$)).+|(?!main).+)$'
      - name: Build Preparation
        id: prep
        run: |
          set -o nounset
          set -e

          if [[ $GITHUB_REF =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            DOCKER_TAG=${GITHUB_REF#refs/tags/}
            BRANCH=$DOCKER_TAG  # In lieu of an actual branch name

            # We're building a Git release tag.  Deploy to the "main" stack.
            STACK_SUFFIX_OVERRIDE="main"
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            BRANCH=${GITHUB_REF#refs/heads/}
            if [[ $BRANCH == main ]]; then
              # Publish a "latest" image, which may be useful to someone
              # who doesn't care about exact versions.  Builds on "main" won't be
              # auto-deployed and won't use this tag.  (Builds on "main" will trigger
              # an auto-release, generating a new tag whose build will deploy to
              # the main stack.)
              DOCKER_TAG=latest
            else
              BRANCH=${BRANCH#deploy-}  # Remove deploy- prefix, if any
              DOCKER_TAG=${{ steps.calculated-next-version.outputs.new_tag }}
            fi

            # Branch build; let the stack name use the normal convention.
            STACK_SUFFIX_OVERRIDE=""
          else
            echo "Unexpected ref '$GITHUB_REF'.  Exiting." >&2
            exit 1
          fi

          PUSH=true
          if [[ $GITHUB_REF == refs/heads/dependabot* ]]; then
            echo "Dependabot branch"
            PUSH=false
          fi

          GH_REPONAME=$(echo "$GITHUB_REPOSITORY" | tr '[:upper:]' '[:lower:]')
          GH_REPO_NAME=${GH_REPONAME##*/}

          {
              echo "gh-repo-name=${GH_REPO_NAME}"
              echo "docker-tag=${DOCKER_TAG}"
              echo "push=${PUSH}"
              echo "branch=${BRANCH}"
              echo "stack-suffix-override=${STACK_SUFFIX_OVERRIDE}"
          } >>"$GITHUB_OUTPUT"
        env:
          GITHUB_RUN_ID: '${{ github.run_id }}'
          GITHUB_REPOSITORY: '${{ github.repository }}'
      - name: 'Setup Docker Buildx'
        uses: 'docker/setup-buildx-action@v3'
      - name: 'Cache Docker layers'
        uses: 'actions/cache@v3.3.2'
        with:
          path: '/tmp/.buildx-cache'
          key: '${{ runner.os }}-buildx-${{ steps.prep.outputs.branch }}-${{ github.sha }}'
          restore-keys: |
            ${{ runner.os }}-buildx-
            ${{ runner.os }}-buildx-${{ steps.prep.outputs.branch }}
      - name: 'Login to DockerHub'
        uses: 'docker/login-action@v3'
        with:
          username: 'chrisjohnson00'
          password: '${{ secrets.DOCKER_HUB_PASSWORD }}'
      - name: 'Build and push'
        id: 'docker_build'
        uses: 'docker/build-push-action@v5'
        with:
          context: '.'
          file: './Dockerfile'
          # ensure latest base image is used
          pull: 'true'
          # publish
          push: '${{ steps.prep.outputs.push }}'
          # tags determined by prep step
          tags: 'chrisjohnson00/${{ steps.prep.outputs.gh-repo-name }}:${{ steps.prep.outputs.docker-tag }}'
          cache-from: 'type=local,src=/tmp/.buildx-cache'
          cache-to: 'type=local,dest=/tmp/.buildx-cache'
          labels: |
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ steps.prep.outputs.branch }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
  actionslint:
    name: 'Actions Yaml Lint'
    runs-on: 'ubuntu-latest'
    permissions:
      contents: read
      packages: read
      # To report GitHub Actions status checks
      statuses: write
    env:
      VALIDATE_YAML: true
      VALIDATE_GITHUB_ACTIONS: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Super-linter
        uses: super-linter/super-linter/slim@v5.7.2  # x-release-please-version
        env:
          DEFAULT_BRANCH: main
          # To report GitHub Actions status checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
